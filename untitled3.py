# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14VC4pd2CIMj2UnarQHGf_qTMNBj-aqkd
"""

#!pip install pyspark

from google.colab import drive
drive.mount('/content/drive')

from pyspark.sql import SparkSession
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/Sem-5/BDA/Mini project/Scraped_dataset.csv')

df.head()

# Convert the data to the form /d-/d/d-/d/d/d/d
df['Date of Booking'] = df['Date of Booking'].str.replace('/', '-')
df['Date of Journey'] = df['Date of Journey'].str.replace('/', '-')
df.head()

# Define a lambda function to convert the day value to a day name
def convert_day_to_name(date):
    day_name = date.strftime('%A')
    return day_name

# Extract Journey Day from the Date of Journey
df['Journey_Day'] = pd.to_datetime(df['Date of Journey'], format='%d-%m-%Y').apply(convert_day_to_name).astype('category')

#
df['Total Stops'] = df['Total Stops'].str.split('\n').str[0]

#Extract Airline
df['Airline'] = df['Airline-Class'].str.split('\s\n').str[0]

#Extract Flight Code
df['Flight_code'] = df['Airline-Class'].str.split('\n').str[1]

#Extract Flight Class
df['Class'] = df['Airline-Class'].str.split('\n').str[2]

#Extract Source
df['Source'] = df['Departure Time'].str.split('\n').str[1]

#Extract Destination
df['Destination'] = df['Arrival Time'].str.split('\n').str[1]
df.head()

# Map Departure Time to categories
def map_time_to_category(time_str):
    hour = pd.to_datetime(time_str).hour
    if hour < 6:
        return 'Before 6 AM'
    elif hour >= 6 and hour < 12:
        return '6 AM - 12 PM'
    elif hour >= 12 and hour < 18:
        return '12 PM - 6 PM'
    elif hour >= 18:
        return 'After 6 PM'
    else:
        return 'Other'

# Apply the lambda function to the 'Time' column and store the result in a new column
df['Departure'] = df['Departure Time'].str.split('\n').str[0].apply(map_time_to_category)

# Apply the lambda function to the 'Time' column and store the result in a new column
df['Arrival'] = df['Arrival Time'].str.split('\n').str[0].apply(map_time_to_category)

def convert_time_to_decimal(time_str):
    time_parts = time_str.split('h ')
    hours = int(time_parts[0])
    minutes = int(time_parts[1].replace('m', ''))
    decimal_time = hours + (minutes / 60)
    return decimal_time

# Apply the lambda function to the 'Time' column and store the result in a new column
df['Duration'] = df['Duration'].apply(convert_time_to_decimal)

# Renaming and remove , from the price value
df['Fare'] = df['Price'].str.replace(',', '').astype(float)

# Convert the date columns to datetime format
df['Date of Booking'] = pd.to_datetime(df['Date of Booking'])
df['Date of Journey'] = pd.to_datetime(df['Date of Journey'])

# Calculate the days left between the 'Booking Date' and 'Journey Date' columns
df['Days_left'] = (df['Date of Journey'] - df['Date of Booking']).dt.days

df = df.drop('Airline-Class', axis=1)
df = df.drop('Departure Time', axis=1)
df = df.drop('Arrival Time', axis=1)
df = df.drop('Price', axis=1)
df.head(13)

# display summary statistics of numerical columns
df.describe()

# get numbers of null values
df.isnull().sum()

# get number of dublicate records
print("number of dublicate records:",df.duplicated().sum())
print("precentage of dublicate records:" ,(df.duplicated().sum()/df.shape[0])*100,"%")

# remove dublicate records
print("shape before remove dublicates:",df.shape)
# Dropping all the duplicates and keeping the last entry only.
df.drop_duplicates(keep='last',ignore_index=True ,inplace=True)
print("shape after remove dublicates:",df.shape)

# get colums for month and day
df['Day'] = df['Date of Journey'].dt.day
df['Month'] = df['Date of Journey'].dt.month
months = {
    1:"January",
    2:"Febuary",
    3:"March",
    4:"April",
    5:"May",
    6:"June",
    7:"July",
    8:"August",
    9:"September",
    10:"October",
    11:"November",
    12:"December"
}
df['Month'] = df['Month'].map(months)

df.head(20)

import matplotlib.pyplot as plt
figure, axis = plt.subplots(figsize=(7,7))
class_counts = df["Class"].value_counts()
plt.pie(class_counts, labels=class_counts.index, autopct='%.2f')

figure, axis = plt.subplots(1, 2,figsize=(20,10))

class_counts = df["Departure"].value_counts()
axis[0].pie(class_counts, labels=class_counts.index, autopct='%.2f')
axis[0].set_title("Departure")

class_counts = df["Arrival"].value_counts()
axis[1].pie(class_counts, labels=class_counts.index, autopct='%.2f')
axis[1].set_title("Arrival")

figure, axis = plt.subplots(figsize=(7,7))
class_counts = df["Month"].value_counts()
plt.pie(class_counts, labels=class_counts.index, autopct='%.2f')

figure, axis = plt.subplots(figsize=(9,9))
class_counts = df["Total Stops"].value_counts()
plt.pie(class_counts, labels=class_counts.index, autopct='%.2f')

# Lets first find the number of flights flying from and to each airport
sns.set(style='darkgrid')
fig,axs = plt.subplots(1,2, figsize=(20,10),sharey=True)
sns.countplot(data=df,y="Source",ax=axs[0])
sns.countplot(data=df,y="Destination",ax=axs[1])
for ax in axs:
    ax.set_xlabel('Number of Flight Tickets')
axs[0].set_title("Number of Flights flying from",size=15)
axs[1].set_title("Number of Flights flying to",size=15)

# Count the number of flights for each source-destination pair
flight_count = df.groupby(['Source', 'Destination']).size().reset_index(name='Count')

# Sort the data by count
flight_count = flight_count.sort_values(by='Count')

# Plot a bar chart of the flight count by source-destination pairs
fig = plt.figure(figsize=(12, 6))
plt.bar(flight_count['Source'] + '-' + flight_count['Destination'], flight_count['Count'])
plt.xticks(rotation=90)

# Group the data by Arrival and calculate the mean Fare
arrival_fares = df.groupby('Journey_Day')['Journey_Day'].count().sort_values()

# Plot the bar chart
plt.bar(arrival_fares.index, arrival_fares.values)
plt.xticks(rotation=45)

plt.figure(figsize=(25,10))
sns.histplot(x=df.Airline,hue=df.Class)

plt.figure(figsize=(10, 6))
plt.hist(df['Duration'], bins=20)



# Coverting the categorical into a numeric form using Label Encoder

plt.figure(figsize=(25,10))
sns.barplot(x=df.Journey_Day,y=df.Fare,hue=df.Class,palette="Greens_r",order=['Saturday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday'])

# Group the data by Days_left and calculate the mean Fare
daily_fares = df.groupby('Days_left')['Fare'].mean()

# Plot the time series
plt.plot(daily_fares.index, daily_fares.values)

# Coverting the categorical into a numeric form using Label Encoder
df['Duration']=df['Duration'].astype(float)

plt.figure(figsize=(20,10))
sns.lineplot(data=df, x = "Duration", y ="Fare",hue="Class")

# Group the data by Arrival and calculate the mean Fare
arrival_fares = df.groupby('Arrival')['Fare'].mean().sort_values()

# Plot the bar chart
plt.bar(arrival_fares.index, arrival_fares.values)
plt.xticks(rotation=45)

# Group the data by Departure and calculate the mean Fare
arrival_fares = df.groupby('Departure')['Fare'].mean().sort_values()

# Plot the bar chart
plt.bar(arrival_fares.index, arrival_fares.values)
plt.xticks(rotation=45)

# Group the data by Arrival and calculate the mean Fare
airline_fares = df.groupby('Airline')['Fare'].mean().sort_values()

# Plot the bar chart
plt.bar(airline_fares.index, airline_fares.values)
plt.xticks(rotation=45)

plt.figure(figsize=(15,10))
sns.barplot(x=df.Airline,y=df.Fare,hue=df.Class,palette="Greens_r")

plt.figure(figsize=(12,7))
sns.boxplot(x='Total Stops',y='Fare',data=df,palette='hls')
plt.title('Stops Vs Ticket Price',fontsize=15)
plt.xlabel('Stops',fontsize=15)
plt.ylabel('Price',fontsize=15)

# Calculate the mean fare for each source-destination pair
mean_fare = df.groupby(['Source', 'Destination'])['Fare'].mean().reset_index(name='Mean Fare')

# Sort the data by mean fare
mean_fare = mean_fare.sort_values(by='Mean Fare')

# Plot a bar chart of the mean fare by source-destination pairs
fig = plt.figure(figsize=(12, 6))
plt.bar(mean_fare['Source'] + '-' + mean_fare['Destination'], mean_fare['Mean Fare'])
plt.xticks(rotation=90)

# Coverting the labels into a numeric form using Label Encoder
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for col in df.columns:
    if df[col].dtype=='object':
        df[col]=le.fit_transform(df[col])

df.head()

# get corelation with numerical columns
df.corr()

p = df.corr(method='pearson')
plt.figure(figsize=(12,12))
heatmap = sns.heatmap(p, vmin=-1, vmax=1, annot=True)

# drop colums with very low corelations
df=df.drop(columns=['Date of Booking','Date of Journey','Journey_Day'])
df.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 10)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

rf = RandomForestRegressor(n_estimators=100, random_state=42)

rf.fit(X_train, y_train)

print('Training Score: ', rf.score(X_train, y_train))
print('Testing Score: ', rf.score(X_test, y_test))
print('RMSE: ', np.sqrt(mean_squared_error(y_test, rf.predict(X_test))))

1794/(max(y)-min(y))

y_pred = rf.predict(X_test)

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, y_pred))
print('MSE:', metrics.mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

metrics.r2_score(y_test, y_pred)

import pickle

# Save the model
with open('model1.pkl', 'wb') as f:
    pickle.dump(rf, f)